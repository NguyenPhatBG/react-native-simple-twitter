import React, { useEffect, useState, useCallback } from 'react';
import { NativeModules } from 'react-native';
import client from './client';
import Modal from './Components/Modal';
const useTwitter = (props) => {
    const [visible, setVisible] = useState(false);
    const [authURL, setAuthURL] = useState('');
    const [webViewState, setWebViewState] = useState(null);
    const [loggedIn, setLoggedIn] = useState(false);
    const login = async (callback_url) => {
        const url = await client.getLoginUrl(callback_url);
        setAuthURL(url);
        setVisible(true);
    };
    const clearCookies = (callback = () => { }) => {
        NativeModules.Networking.clearCookies(callback);
    };
    const TWModal = useCallback((modalProps) => {
        const onWebViewStateChanged = (webViewNavigation) => {
            setWebViewState(webViewNavigation);
        };
        return (<Modal visible={visible} authURL={authURL} onClosePress={() => setVisible(false)} onWebViewStateChanged={onWebViewStateChanged} headerColor={modalProps.headerColor} textColor={modalProps.textColor} closeText={modalProps.closeText} renderHeader={modalProps.renderHeader}/>);
    }, [visible]);
    useEffect(() => {
        if (webViewState) {
            const match = webViewState.url.match(/\?oauth_token=.+&oauth_verifier=(.+)/);
            if (match && match.length > 0) {
                setVisible(false);
                setAuthURL('');
                client.getAccessToken(match[1]).then((response) => {
                    client.setAccessToken(response.oauth_token, response.oauth_token_secret);
                    setLoggedIn(true);
                }).catch((err) => {
                    console.warn(`[getAccessToken failed] ${err}`);
                    if (props?.onError) {
                        props.onError(err);
                    }
                });
            }
        }
    }, [webViewState]);
    useEffect(() => {
        if (loggedIn && props?.onSuccess) {
            const options = {
                include_entities: false,
                skip_status: true,
                include_email: true,
            };
            client.api('GET', 'account/verify_credentials.json', options).then((response) => {
                props.onSuccess(response, { oauth_token: client.Token, oauth_token_secret: client.TokenSecret });
                setLoggedIn(false);
            }).catch((err) => {
                console.warn(`[get("account/verify_credentials.json") failed] ${err}`);
                if (props?.onError) {
                    props.onError(err);
                }
                setLoggedIn(false);
            });
        }
    }, [loggedIn]);
    return {
        twitter: {
            login,
            clearCookies,
            getAccessToken: () => ({ oauth_token: client.Token, oauth_token_secret: client.TokenSecret }),
            setAccessToken: client.setAccessToken,
            setConsumerKey: client.setConsumerKey,
            api: client.api,
            post: client.post,
            get: client.get,
        },
        TWModal,
    };
};
export default useTwitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaG9va3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQU03QyxPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFFOUIsT0FBTyxLQUE4QixNQUFNLG9CQUFvQixDQUFDO0FBT2hFLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7SUFDbkMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxRQUFRLENBQVUsS0FBSyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxRQUFRLENBQVMsRUFBRSxDQUFDLENBQUM7SUFDbkQsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxRQUFRLENBQTJCLElBQUksQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEdBQUcsUUFBUSxDQUFVLEtBQUssQ0FBQyxDQUFDO0lBRXpELE1BQU0sS0FBSyxHQUFHLEtBQUssRUFBRSxZQUFxQixFQUFFLEVBQUU7UUFDNUMsTUFBTSxHQUFHLEdBQVcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTNELFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxXQUFzQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRTtRQUN2RSxhQUFhLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUM7SUFF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QztpQkFDcEI7Z0JBRUQsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRWYsT0FBTztRQUNMLE9BQU8sRUFBRTtZQUNQLEtBQUs7WUFDTCxZQUFZO1lBQ1osY0FBYyxFQUFFLEdBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzFHLGNBQWMsRUFBRSxNQUFNLENBQUMsY0FBYztZQUNyQyxjQUFjLEVBQUUsTUFBTSxDQUFDLGNBQWM7WUFDckMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ2YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRztTQUNoQjtRQUNELE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsZUFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLyogbm9kZV9tb2R1bGVzICovXG5pbXBvcnQgeyBXZWJWaWV3TmF2aWdhdGlvbiB9IGZyb20gJ3JlYWN0LW5hdGl2ZS13ZWJ2aWV3JztcblxuLyogY2xpZW50ICovXG5pbXBvcnQgY2xpZW50IGZyb20gJy4vY2xpZW50JztcbmltcG9ydCB7IEVycm9yUmVzcG9uc2UsIEFjY2Vzc1Rva2VuLCBUd2l0dGVyVXNlciB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IE1vZGFsLCB7IFByb3BzIGFzIE1vZGFsUHJvcHMgfSBmcm9tICcuL0NvbXBvbmVudHMvTW9kYWwnO1xuXG50eXBlIFByb3BzID0ge1xuICBvblN1Y2Nlc3M6ICh1c2VyOiBUd2l0dGVyVXNlciwgYWNjZXNzVG9rZW46IEFjY2Vzc1Rva2VuKSA9PiB2b2lkLFxuICBvbkVycm9yPzogKGVycjogRXJyb3JSZXNwb25zZSkgPT4gdm9pZCxcbn1cblxuY29uc3QgdXNlVHdpdHRlciA9IChwcm9wcz86IFByb3BzKSA9PiB7XG4gIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2F1dGhVUkwsIHNldEF1dGhVUkxdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IFt3ZWJWaWV3U3RhdGUsIHNldFdlYlZpZXdTdGF0ZV0gPSB1c2VTdGF0ZTxXZWJWaWV3TmF2aWdhdGlvbiB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbbG9nZ2VkSW4sIHNldExvZ2dlZEluXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICBjb25zdCBsb2dpbiA9IGFzeW5jIChjYWxsYmFja191cmw/OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB1cmw6IHN0cmluZyA9IGF3YWl0IGNsaWVudC5nZXRMb2dpblVybChjYWxsYmFja191cmwpO1xuXG4gICAgc2V0QXV0aFVSTCh1cmwpO1xuICAgIHNldFZpc2libGUodHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2xlYXJDb29raWVzID0gKGNhbGxiYWNrOiAocmVzdWx0OiBib29sZWFuKSA9PiB2b2lkID0gKCkgPT4geyB9KSA9PiB7XG4gICAgTmF0aXZlTW9kdWxlcy5OZXR3b3JraW5nLmNsZWFyQ29va2llcyhjYWxsYmFjayk7XG4gIH07XG5cbiAgY29uc3QgVFdNb2RhbCA9IHVzZUNhbGxiYWNrKChtb2RhbFByb3BzOiBNb2RhbFByb3BzKSA9PiB7XG4gICAgY29uc3Qgb25XZWJWaWV3U3RhdGVDaGFuZ2VkID0gKHdlYlZpZXdOYXZpZ2F0aW9uOiBXZWJWaWV3TmF2aWdhdGlvbikgPT4ge1xuICAgICAgc2V0V2ViVmlld1N0YXRlKHdlYlZpZXdOYXZpZ2F0aW9uKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbFxuICAgICAgICB2aXNpYmxlPXt2aXNpYmxlfVxuICAgICAgICBhdXRoVVJMPXthdXRoVVJMfVxuICAgICAgICBvbkNsb3NlUHJlc3M9eygpID0+IHNldFZpc2libGUoZmFsc2UpfVxuICAgICAgICBvbldlYlZpZXdTdGF0ZUNoYW5nZWQ9e29uV2ViVmlld1N0YXRlQ2hhbmdlZH1cbiAgICAgICAgaGVhZGVyQ29sb3I9e21vZGFsUHJvcHMuaGVhZGVyQ29sb3J9XG4gICAgICAgIHRleHRDb2xvcj17bW9kYWxQcm9wcy50ZXh0Q29sb3J9XG4gICAgICAgIGNsb3NlVGV4dD17bW9kYWxQcm9wcy5jbG9zZVRleHR9XG4gICAgICAgIHJlbmRlckhlYWRlcj17bW9kYWxQcm9wcy5yZW5kZXJIZWFkZXJ9XG4gICAgICAvPlxuICAgICk7XG4gIH0sIFt2aXNpYmxlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAod2ViVmlld1N0YXRlKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IHdlYlZpZXdTdGF0ZS51cmwubWF0Y2goL1xcP29hdXRoX3Rva2VuPS4rJm9hdXRoX3ZlcmlmaWVyPSguKykvKTtcblxuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIHNldEF1dGhVUkwoJycpO1xuXG4gICAgICAgIGNsaWVudC5nZXRBY2Nlc3NUb2tlbihtYXRjaFsxXSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjbGllbnQuc2V0QWNjZXNzVG9rZW4ocmVzcG9uc2Uub2F1dGhfdG9rZW4sIHJlc3BvbnNlLm9hdXRoX3Rva2VuX3NlY3JldCk7XG5cbiAgICAgICAgICBzZXRMb2dnZWRJbih0cnVlKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgW2dldEFjY2Vzc1Rva2VuIGZhaWxlZF0gJHtlcnJ9YCk7XG5cbiAgICAgICAgICBpZiAocHJvcHM/Lm9uRXJyb3IpIHtcbiAgICAgICAgICAgIHByb3BzLm9uRXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3dlYlZpZXdTdGF0ZV0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGxvZ2dlZEluICYmIHByb3BzPy5vblN1Y2Nlc3MpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGluY2x1ZGVfZW50aXRpZXM6IGZhbHNlLFxuICAgICAgICBza2lwX3N0YXR1czogdHJ1ZSxcbiAgICAgICAgaW5jbHVkZV9lbWFpbDogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIGNsaWVudC5hcGk8VHdpdHRlclVzZXI+KCdHRVQnLCAnYWNjb3VudC92ZXJpZnlfY3JlZGVudGlhbHMuanNvbicsIG9wdGlvbnMpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHByb3BzLm9uU3VjY2VzcyhyZXNwb25zZSwgeyBvYXV0aF90b2tlbjogY2xpZW50LlRva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQ6IGNsaWVudC5Ub2tlblNlY3JldCB9KTtcblxuICAgICAgICBzZXRMb2dnZWRJbihmYWxzZSk7XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW2dldChcImFjY291bnQvdmVyaWZ5X2NyZWRlbnRpYWxzLmpzb25cIikgZmFpbGVkXSAke2Vycn1gKTtcblxuICAgICAgICBpZiAocHJvcHM/Lm9uRXJyb3IpIHtcbiAgICAgICAgICBwcm9wcy5vbkVycm9yKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRMb2dnZWRJbihmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2dnZWRJbl0pO1xuXG4gIHJldHVybiB7XG4gICAgdHdpdHRlcjoge1xuICAgICAgbG9naW4sXG4gICAgICBjbGVhckNvb2tpZXMsXG4gICAgICBnZXRBY2Nlc3NUb2tlbjogKCk6IEFjY2Vzc1Rva2VuID0+ICh7IG9hdXRoX3Rva2VuOiBjbGllbnQuVG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldDogY2xpZW50LlRva2VuU2VjcmV0IH0pLFxuICAgICAgc2V0QWNjZXNzVG9rZW46IGNsaWVudC5zZXRBY2Nlc3NUb2tlbixcbiAgICAgIHNldENvbnN1bWVyS2V5OiBjbGllbnQuc2V0Q29uc3VtZXJLZXksXG4gICAgICBhcGk6IGNsaWVudC5hcGksXG4gICAgICBwb3N0OiBjbGllbnQucG9zdCxcbiAgICAgIGdldDogY2xpZW50LmdldCxcbiAgICB9LFxuICAgIFRXTW9kYWwsXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VUd2l0dGVyO1xuIl19